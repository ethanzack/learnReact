{"version":3,"sources":["Components/Product.js","Components/Cart.js","Components/ProductTable.js","App.js","serviceWorker.js","index.js"],"names":["Product","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","addedToCart","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","style","containerStyle","prod","title","currencyFormat","price","Button","outline","color","textAlign","onClick","Modal","isOpen","className","ModalHeader","ModalBody","Component","_containerStyle","borderRadius","borderWidth","border","padding","marginBottom","width","height","defineProperty","Cart","cartStyle","ModalFooter","alignItems","display","paddingBottom","ProductTable","Components_Cart","Container","Row","products","map","i","Col","Components_Product","App","backgroundColor","Components_ProductTable","data","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.370f45ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col, Button, Modal, ModalHeader, ModalFooter, ModalBody } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-table/react-table.css'\n\n\nclass Product extends Component {\n  constructor(props) {\n     super(props);\n     this.state = {\n       modal: false,\n       addedToCart: false\n     };\n\n     this.toggle = this.toggle.bind(this);\n   }\n\n   toggle() {\n     this.setState({\n       modal: !this.state.modal\n     });\n   }\n\n\n  render() {\n    return (\n      <div style = {containerStyle}>\n            <h4> {this.props.prod.title} </h4>\n            <h6> {this.props.prod.currencyFormat}{this.props.prod.price}</h6>\n            <Button outline color=\"primary\" style = {{textAlign: 'bottom'}} onClick={this.toggle}> Add to Cart </Button>\n            <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n                <ModalHeader toggle={this.toggle}>Success</ModalHeader>\n                  <ModalBody>\n                    <strong>{this.props.prod.title}</strong> has been added to your cart!\n                  </ModalBody>\n            </Modal>\n\n      </div>\n    );\n  }\n}\n\nconst containerStyle = {\n  borderRadius: '5px',\n  borderWidth: '1px',\n  border: '2px solid black',\n  padding: '20px',\n  marginBottom: '100px',\n  width: '300px',\n  height: '400px',\n  marginBottom: '50px',\n  backgroundColor: 'white'\n}\n\nexport default Product;\n\n// {this.props.products.map(function(prod, i){\n//   return <p> {prod.image} </p>\n// })}\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Button, Modal, ModalHeader, ModalFooter, ModalBody } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-table/react-table.css'\n\n\nclass Cart extends Component {\n  constructor(props) {\n     super(props);\n     this.state = {\n       modal: false\n     };\n\n     this.toggle = this.toggle.bind(this);\n   }\n\n   toggle() {\n     this.setState({\n       modal: !this.state.modal\n     });\n   }\n\n\n  render() {\n    return (\n      <div style = {cartStyle}>\n        <Button color = \"success\" onClick={this.toggle} style = {{width: '100%'}}> View My Cart </Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n            <ModalHeader toggle={this.toggle}>MY CART</ModalHeader>\n              <ModalBody>\n                Cart Items\n              </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.toggle}>Check Out</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst cartStyle = {\n  alignItems: 'center',\n  textAlign: 'center',\n  width: '100%',\n  display: 'flex',\n  paddingBottom: '30px',\n}\n\nexport default Cart;\n\n// {this.props.products.map(function(prod, i){\n//   return <p> {prod.image} </p>\n// })}\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Button } from 'reactstrap';\nimport Product from './Product.js'\nimport Cart from './Cart.js'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'react-table/react-table.css'\n\n\nclass ProductTable extends Component {\n  render() {\n    return (\n      <div>\n      <Cart />\n      <Container>\n      <Row>\n        {this.props.products.map(function(prod, i){\n          return <Col><Product prod = {prod} /></Col>\n        })}\n       </Row>\n      </Container>\n      </div>\n    );\n  }\n}\n\nexport default ProductTable;\n\n// {this.props.products.map(function(prod, i){\n//   return <p> {prod.image} </p>\n// })}\n","import React, { Component } from 'react';\nimport data from './products.json'\nimport ProductTable from './Components/ProductTable.js'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div style = {{backgroundColor: 'gray'}}>\n        <ProductTable products = {data.products} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}